// 闭包

// 函数和对其周围状态的引用捆绑在一起就构成了闭包，
// 也就是说明什么呢，闭包可以让你从内部函数访问外部函数的作用域，

// 什么是闭包
// 1首先闭包是一个函数，在函数定义的时候就生成了，但是在函数调用的时候才体现出来
// 2函数不仅能访问自己的作用域，还能访问其他函数的作用域

// 闭包产生的原理
// 内部函数可以访问外部函数，由于内部函数的作用域链中存在外部函数的变量，
// 导致外部函数在运行结束之后，其内部变量一值被背包函数引用导致没办法释放内存

// 那么如何创建一个闭包呢
// 函数内部在定义一个函数，这个内部函数就是闭包函数

// 闭包的好处
// 函数作用域链 是有内部向外部的，外部是访问不了内部的，但是可以通过闭包函数return 一个函数 或者 对象，让外部接受，
// 这样闭包函数的封闭空间可以达到私有的目的



// 客户端收到服务器端的公钥之后，会对公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么HTTPS传输就无法继续。
// 如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，
// 然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，
// 至此，HTTPS中的第一次HTTP请求结束。

// 5.客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。

// 6.服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。

// 7.然后服务器将加密后的密文发送给客户端。

// 8.客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。


function a() {
    var arr = {
        length: 0,
        push: Array.prototype.push,
        splice: Array.prototype.splice,
        slice: Array.prototype.slice
    }

    return arr;
}


var a = {
    m: () => {
        console.log(this)
    }
}

var b = {
    m: function () {
        console.log(this)
    }
}