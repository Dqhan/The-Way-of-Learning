输入url 到浏览器展示页面这个过程发生了什么


从浏览器接受这个URL到开启网络请求线程{
    解析url
}

从网络线程到发送一个完整的http请求{
    DNS查询得到IP

    TCP/IP请求

    5层因特网协议栈    
}

从服务器接受到请求到对应后台接收到的请求{
    负载均衡
    后台处理请求
}

后台与前台的http交互{
    http报头、响应码、报文结构、cookie、静态资源cookie优化、编码解码、zip压缩
    http报文结构
    cookie优化
    长链接与短连接
    http
    https
    http2.0
}

缓存问题，http缓存（http缓存头部，etag，catch-control）{
    强缓存与弱缓存{
        缓存可以简单的分为两种类型：强缓存（200 from catch） 与协商缓存（304）
        强缓存：浏览器如果半段本地缓存未过期就可以直接使用，无需发送http请求
        协商缓存：浏览器会向服务器发送http请求，然后服务器会告诉浏览器文件为改变，让浏览器使用本地缓存
    }
    缓存头部简述{
        属于强缓存的控制头部{
            http1.1   cache-control{
               （1）、max-age：用来设置资源（representations）可以被缓存多长时间，单位为秒；

            　　（2）、s-maxage：和max-age是一样的，不过它只针对代理服务器缓存而言；

            　　（3）、public：指示响应可被任何缓存区缓存；

            　　（4）、private：只能针对个人用户，而不能被代理服务器缓存；

            　　（5）、no-cache：强制客户端直接向服务器发送请求,也就是说每次请求都必须向服务器发送。服务器接收到请求，然后判断资源是否变更，是则返回新内容，否则返回304，未变更。这个很容易让人产生误解，使人误以为是响应不被缓存。实际上Cache-Control: no-cache是会被缓存的，只不过每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存响应的有效性。

            　　（6）、no-store：禁止一切缓存（这个才是响应不被缓存的意思）。
            }
        }
        属于协商缓存的控制头部{
            http1.1 If-None-Match/E-tag
            http1.0 If-Modified-Since/Last-Modified
            都是成对出现的，即第一次请求的响应头家还是那个Last-Modified或者Etag，
                           则后续请求则会带上对应的请求字段If-Modified-Since或者If-None-Match
                           如果响应头没有，则请求头没有
        }
    }
}
web缓存{
    什么是web缓存，web缓存是指一个web资源(如html页面，图片，js，数据等)存在于一个web服务器和客户端之间的副本内。缓存会根据请求保存输出内容的副本,
    当下一个请求进来的时候，如果是相同的url，缓存机制会决定是直接使用副本响应请求，还是向源服务器再次发送请求，比较常见的就是浏览器会缓存访问过的网站的网页
    当再次请求这个url地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页，只有当网站明确标识了资源已经更新，浏览器才会再次下载
    网页。
}
web缓存的作用{
    减少网络带宽消耗
    降低服务器压力
    减少网络延迟，加快页面打开速度
}
web缓存类型{
    数据库缓存{
        redis
    }
    服务器端缓存{
        代理服务器缓存{
            常见代理服务器缓存解决方案有 Squid
        }
        CDN缓存（网关缓存、反向代理缓存）{
            CDN缓存一般有网站管理员自己部署，为了让他们的网站更容易扩展并获得更好的性能。
            浏览器首先向CDN网关发起web请求，网关服务器后面对应着一台或者多台负载均衡服务器，根据负载请求，动态
            将请求转发到合适的源服务器上。虽然这种架构的负载均衡员服务速器之间的缓存没办法共享，却拥有更好的扩展性。
        }
    }
     

        浏览器端缓存
        浏览器缓存根据一套与服务器约定的规则进行工作，在同一个会话过程中会检查一次并确定缓存的副本足够新。如果你浏览过程中，比如前进或后退，访问到同一个图片，这些图片可以从浏览器缓存中调出而即时显现。

 

        Web 应用层缓存
        应用层缓存指的是从代码层面上，通过代码逻辑和缓存策略，实现对数据，页面，图片等资源的缓存，可以根据实际情况选择将数据存在文件系统或者内存中，减少数据库查询或者读写瓶颈，提高响应效率。
}

浏览器端的缓存规则{
    对于浏览器的缓存来讲，这些规则都是http协议头跟html页面的meta标签中定义的。他们分别从
    新鲜度{
        过期机制： 缓存副本的有效期，一个缓存副本必须满足{
            含有完整的过期时间控制头部信息（http报头），并且仍在有效期内；
            浏览器已经使用过这个缓存副本，并且在一个会话中已经检测过新鲜度；
        }
        满足以上两个情况中的一种，浏览器会从缓存内部读取副本并渲染。
    }
    校验值{
        服务器返回资源时，在控制头添加内容的实体标签，下次请求携带实体标签，服务器根据实体标签判断内容是否修改，进而判断
        是否从新获取资源还是从缓存中读取
    }
    两个维度来规定浏览器石头可以直接使用缓存中的副本，还是需要去源服务器获取更新副本
}
浏览器缓存的控制{
    使用 HTML Meta 标签{
        <META HTTP-EQUIV="Pragma" CONTENT="no-cache">
        上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取 。
        使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析 HTML 内容本身。
    }
    使用缓存有关的 HTTP 消息报头{
        新鲜度{
                Expires      Sun，16，OCT，2016         响应           告诉浏览器在过期时间前可以使用副本
                Pragma       no-cache                   响应           告诉浏览器忽略资源缓存副本（http1.1可用cache-control控制）
                cache-control  no-cache                 响应          告诉浏览器忽略副本资源，直接从源服务器获取资源
                                no-store                响应           强制缓存在任何情况下都不要保留副本
                                max-age=[秒]            响应            指明缓存副本的有效时长
                                public                  响应           任何用途的缓存在（本地缓存，代理服务器）可以无条件缓存该资源
                                private                 响应           只针对单个用户或者实体缓存资源
                Last-Modified   时间                     响应          告诉浏览器当前资源最后修改时间
                If-Modified-Since  shijian              请求          上一次响应的Last-modifuied  会当成If-Modified-Since的值发送给服务器
        }
        校验值{
            ETag 
            If-None-Match
        }
        辅助{
            Vary    Accept-Encoding   响应       辅助从多个缓存副本中筛选合适的版本
        }
    }
    cache-control与Expires{
        两者作用一致，cache-control优先级大于Expires
    }
    Last-Modified/ETag与Cache-Contorl/Expires{
        Last-Modified/ETag使用时，浏览器再次访问url时候，请求还是会访问到服务器，服务器判断没有修改则返回一个304
        告诉浏览器从本地获取资源
        Cache-Control/Expires则不同，如果检测到本地缓存还在有效时间范围内，浏览器直接从本地缓存获取副本，而不会发送任何请求
        两者同时出现时，Cache-Control/Expries优先级大于Last—Modifued、Etag

        一般情况下，使用 Cache-Control/Expires 会配合 Last-Modified/ETag 一起使用，
        因为即使服务器设置缓存时间, 当用户点击 “刷新” 按钮时，
        浏览器会忽略缓存继续向服务器发送请求，这时 Last-Modified/ETag 将能够很好利用 304，从而减少响应开销。
    }

    用户操作行为与缓存
    用户操作        Expires/cache-contorl            last-modified/ETag
    地址栏回车           有效                                  有效
    网页链接跳转         有效                                  有效
    新开窗口             有效                                  有效
    前进后退              有效                                  有效
    F5刷新                无效                                 有效
    Ctrl+ F5             无效                                  无效
}

哪些请求不能被缓存？{
    HTTP信息头中报班 cache-control： no-cache  ，Pragma：no-cache  cache-control:max-age=0等等
    认证信息不能被缓存比如cookie
    经过https安全加密的请求（现在浏览器基本已经支持缓存）
    POST请求无法被缓存
    HTTP请求头不包含Last-modified/Etag 也不包含cache-control/Expires
}
如何构建可缓存站点{
    同一资源保证URL稳定性
    给CSS js 图片等静态文件增加http缓存头，并强制html入口不被缓存{
        对于不经常修改的静态资源 比如：js css 图片等 设置一个较长的过期时间
    }
    减少对cookie 的依赖
    减少对https的使用
    尽量是用get请求
    动态 CGI 也是可以被缓存{
        如果动态脚本或 CGI 输入的内容在一定的时间范围内是固定的，或者根据 GET 参数相同，
        输入的内容相同，我们也认为请求是可以被缓存的，有以下几种方式，可以达到这个效果：{
            让动态脚本定期将内容改变时导出成静态文件，Web 直接访问带有 Last-Modified/Etag 的静态文件
            开发者可以通过代码给动态脚本的响应头中添加 Cache-Control: max-age，告诉浏览器在过期前可以直接使用副本
            通过代码给动态脚本的响应头添加 Last-Modified/Etag 信息，浏览器再次请求的时候，
            可以通过解析If-Modified-Since/If-None-Match 得知浏览器是否存在缓存，由代码逻辑控制是否返回 304
        }
    }
}
h5缓存机制{
    localstograge
    Mainfest
}


页面渲染流程{
    解析html  构建dom树
    解析css  生成css规则树
    合并dom树根css规则书 生成render树
    布局render树（layout/reflow） 负责各元素尺寸、位置计算
    绘制render树（paint） 绘制页面像素信息
    GUI显示
}

