从输入URL显示页面过程中，涉及网络层面的过程有三个{
    1.DNS解析
    2.TCP链接
    3.http请求/响应{
        1.减少请求次数
        2.减少单词请求所花费的时间
    }
}

缓存策略{
    1.Memory Cache{
        本地缓存
    }
    2.Service Worker Cache{
        离线缓存
    }
    3.HTTP Cache{
        http缓存
        get请求的7个过程{
            接受
            解析
            查询{
                缓存查看本地是否有副本可用，如果没有，就获取一份儿副本
            }
            新鲜度检测{
                缓存查看已缓存的副本是否够新鲜，如果不是询问服务器是否更新
            }
            创建响应{
                缓存会用新的首部和已经缓存的主题来构建一条响应报文
            }
            发送{
                发送给客户端
            }
            日志            
        }
        方案{
            强缓存{
                命中资源直接从缓存里取
                Expires{
                }
                Cache-Control{
                }
            }
            关键字理解{
                public{
                    够被代理服务缓存
                }
                private{
                    不能被代理服务器缓存
                }
                no-cache{
                    请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期
                }
                no-store{
                    不使用任何缓存策略
                }
            }
            协商缓存{
                在协商缓存的机制下，浏览器需要想服务器询问缓存的相关信息{
                    服务端Not Modified{
                        资源会被重定向到浏览器缓存（状态码304）
                    }
                    服务端Modified{
                        浏览器重新发送请求，下载完整的响应
                    }
                }
            }
        }
    }
    4.Push Cache{
        http2在server push阶段存在的缓存
        Push Cache是缓存的最后一道防线，Memory Cache Http Cache Service Worker Cache 均未命中的情况才会询问Push Cache
        Push Cache是一种存在对话阶段的缓存，当session终止，缓存也释放
    }
    5.CDN
    6.图片优化{

    }
    7.渲染优化{
        渲染过程{
            处理HTML构建DOM树
            处理css构建cssom树
            讲DOM树根CssOM树结合成为render树
            根据render树计算每个节点的物理属性
            GPU画图
        }
        CSS阻塞{
            css是阻塞资源，构建cssom树的过程中，只要cssom不完成，整个渲染就不会完成，所以写上面
        }
        js阻塞{
            js的V8引擎是独立于渲染引擎的，当html解析到script标签的时候回停止渲染并且开始执行js，所以js要写在最下面
        }
        DOM渲染优化{
            回流{
                对DOM的修改导致了DOM的几何尺寸，位置发生变化时，浏览器需要重新计算然后进行绘制，这就叫回流也叫重排
            }
            重绘{
                DOM的样式变化比如字体颜色，背景颜色等等，这时候浏览器绘制新的样式，这就叫重绘
            }
            重绘不会导致回流，但是回流一定导致重绘
        }
        requestAnimationFrame(需要研究下，看似像懒加载)
    }
}